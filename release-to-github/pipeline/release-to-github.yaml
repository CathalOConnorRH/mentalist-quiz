---
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: release-to-github
  annotations:
    tekton.dev/tags: release
spec:
  description: >-
    Tekton release pipeline to release binaries extracted from the
    image built with Konflux, and release the binaries to GitHub.
  params:
    - name: release
      type: string
      description:
        The namespaced name (namespace/name) of the Release custom resource initiating this pipeline execution
    - name: releasePlan
      type: string
      description: The namespaced name (namespace/name) of the releasePlan
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the snapshot
    - name: taskGitUrl
      type: string
      description: The url to the git repo where the release-service-catalog tasks to be used are stored
      default: https://github.com/dheerajodha/the-mentalist-quiz.git
    - name: taskGitRevision
      type: string
      description: The revision in the taskGitUrl repo to be used
      default: create-gh-release-pipeline
  workspaces:
    - name: release-workspace
  tasks:
    - name: verify-access-to-resources
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release-to-github/tasks/verify-access-to-resources/verify-access-to-resources.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: snapshot
          value: $(params.snapshot)
    - name: collect-data
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release-to-github/tasks/collect-data/collect-data.yaml
      params:
        - name: release
          value: $(params.release)
        - name: releasePlan
          value: $(params.releasePlan)
        - name: snapshot
          value: $(params.snapshot)
        - name: subdirectory
          value: $(context.pipelineRun.uid)
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - verify-access-to-resources
    - name: validate-single-component
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release-to-github/tasks/validate-single-component/validate-single-component.yaml
      params:
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      workspaces:
        - name: data
          workspace: release-workspace
      runAfter:
        - collect-data
    - name: extract-requester-from-release
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release-to-github/tasks/kubernetes-actions/kubernetes-actions.yaml
      params:
        - name: image
          value: "quay.io/hacbs-release/cloud-builders-kubectl\
            @sha256:8ab94be8b2b4f3d117f02d868b39540fddd225447abf4014f7ba4765cb39f753"
        - name: script
          value: |
            set -x

            NAMESPACE=$(echo $(params.release) | cut -d '/' -f 1)
            NAME=$(echo $(params.release) | cut -d '/' -f 2)

            AUTHOR=$(kubectl get release ${NAME} -n ${NAMESPACE} \
            -o=jsonpath='{.status.attribution.author}' | tee $(results.output-result.path))

            if [[ ${AUTHOR} == "" ]] ; then exit 1 ; fi
      runAfter:
        - verify-access-to-resources
    - name: extract-binaries-from-image
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release-to-github/tasks/extract-binaries-from-image/extract-binaries-from-image.yaml
      params:
        - name: subdirectory
          value: $(context.pipelineRun.uid)
        - name: snapshotPath
          value: "$(tasks.collect-data.results.snapshotSpec)"
      runAfter:
        - validate-single-component
    - name: collect-gh-params
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release-to-github/tasks/collect-gh-params/collect-gh-params.yaml
      params:
        - name: dataPath
          value: $(tasks.collect-data.results.data)
        - name: snapshotPath
          value: $(tasks.collect-data.results.snapshotSpec)
        - name: binariesPath
          value: $(tasks.extract-binaries-from-image.results.binaries_path)
      runAfter:
        - extract-binaries-from-image
    - name: create-github-release
      workspaces:
        - name: data
          workspace: release-workspace
      taskRef:
        resolver: "git"
        params:
          - name: url
            value: $(params.taskGitUrl)
          - name: revision
            value: $(params.taskGitRevision)
          - name: pathInRepo
            value: release-to-github/tasks/create-github-release/create-github-release.yaml
      params:
        - name: repository
          value: $(tasks.collect-gh-params.results.repository)
        - name: release_version
          value: $(tasks.collect-gh-params.results.release_version)
        - name: githubSecret
          value: $(tasks.collect-gh-params.results.githubSecret)
        - name: content_directory
          value: $(tasks.extract-binaries-from-image.results.binaries_path)
        - name: resultsDirPath
          value: $(tasks.collect-data.results.resultsDir)
      runAfter:
        - collect-gh-params   
